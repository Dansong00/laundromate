---
alwaysApply: false
description: Session documentation rule for creating development session summaries
---
# Session Documentation Rule

## Overview
This rule handles the creation of session summary files when the user uses the `/document` command.

## Command: `/document`

When the user types `/document`, the AI should:

### 1. Generate Timestamp
- Get the current date and time
- Format as `YYYY-MM-DD-HHMM` (e.g., `2025-01-15-1435`)

### 2. Create Session Summary File
- **Location**: `development-logs/` directory
- **Filename**: `YYYY-MM-DD-HHMM-session-summary.md`
- **Example**: `development-logs/2025-01-15-1435-session-summary.md`

### 3. Review Session Content
Analyze the entire chat history for the current session to identify:
- **Key Objectives**: Main goals and tasks addressed
- **Decisions Made**: Important technical or architectural decisions
- **Implementations**: Code changes, new features, or modifications
- **Challenges**: Problems encountered and solutions implemented
- **Next Steps**: Planned or recommended next actions

### 4. Check for Staged Changes
If there are staged changes in the git repository:
- Summarize the staged changes
- Include file names and brief descriptions of modifications
- Note any significant refactoring or new features

### 5. Create Content Structure
The session summary should follow this structure:

```markdown
# Session Summary - [Date]

## Session Information
- **Date**: [Full date and time]
- **Duration**: [If applicable]
- **Key Objective**: [Main goal of the session]

## Key Decisions
- [Decision 1 with rationale]
- [Decision 2 with rationale]
- [Decision 3 with rationale]

## Implementations
- [Implementation 1 with details]
- [Implementation 2 with details]
- [Implementation 3 with details]

## Challenges & Solutions
- [Challenge 1 and how it was resolved]
- [Challenge 2 and how it was resolved]

## Staged Changes
- **File**: [filename] - [description of changes]
- **File**: [filename] - [description of changes]

## Next Steps
- [Next step 1]
- [Next step 2]
- [Next step 3]

## Notes
[Any additional notes, observations, or important information]
```

### 6. File Creation Process
1. Create the `development-logs` directory if it doesn't exist
2. Generate the filename with current timestamp
3. Write the session summary content to the file
4. Confirm creation to the user

### 7. Confirmation Response
Respond to the user with:
- Confirmation that the documentation has been created
- The filename and location of the created file
- Brief summary of what was documented

## Example Usage

**User Input**: `/document`

**AI Response**:
```
âœ… Session documentation created successfully!

ðŸ“„ File: `development-logs/2025-01-15-1435-session-summary.md`

ðŸ“‹ Summary:
- Documented LaundroMate project structure setup
- Created monorepo architecture with pnpm workspace
- Implemented Next.js 14 frontend and FastAPI backend
- Set up shared packages for types, UI components, and utilities
- Configured Docker development environment
- Created comprehensive documentation and guides

The session summary includes all key decisions, implementations, and next steps from this development session.
```

## Integration with Project Structure

This rule integrates with the existing LaundroMate project structure:
- **Development Logs**: Stored in `development-logs/` directory
- **Project Documentation**: References existing docs like [DEVELOPMENT_SUMMARY.md](mdc:DEVELOPMENT_SUMMARY.md)
- **Git Integration**: Checks for staged changes when available
- **Consistent Formatting**: Follows project markdown conventions
alwaysApply: false
description: Session documentation rule for creating development session summaries
---
